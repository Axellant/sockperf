/**
@page sockperf 
   sockperf is a tool for network performance measurement written in C++.



@section _summary 1. SUMMARY

   SockPerf is a network testing tool that can create UDP data streams and
   measure the throughput of a network that is carrying them. sockperf allows the 
   user to define different parameters that can be used for testing a network, 
   or alternately for optimizing or tuning a network. sockperf provides a client 
   and server functionality, and can measure the throughput between the two 
   ends, either unidirectonally or bi-directionally.
   This utility can be used in Linux systems. 

@section _introduction 2. INTRODUCTION

   People are often concerned about measuring the maximum data throughput rate of
   a communications link or network access. A typical method of performing a 
   measurement is to transfer a 'large' file and measure the time taken to do so. 
   The throughput is then calculated by dividing the file size by the time to get 
   the throughput in megabits, kilobits, or bits per second.
   Unfortunately, the results of such an exercise will result in the goodput which 
   is less than the maximum throughput, leading to people believing that their communications 
   link is not operating correctly. In fact, there are many overheads accounted for 
   in good case in addition to transmission overheads, including latency, 
   TCP Receive Window size and machine limitations, which means the calculated 
   goodput does not reflect the maximum achievable throughput.
   
   Being able to quantify latency in terms other than millisecond response time is 
   important when determining the quality of a network. One of available tool that can help 
   administrators do just that is sockperf.
   
   SockPerf works as an on-demand client and server test. How this works is that one system runs 
   the sockperf server over a specified port and another system functions as a client running 
   the sockperf client. The binaries are the same, and there is an option to have the role 
   of client or server, so the roles can easily be reversed if necessary.

@section _overview 3. OVERVIEW

   sockperf tests UDP network connection and maintance following functionality:
   - Measure latency;
   - Measure TX/RX bandwidth;
   - Measure packet loss;
   - Multicast;
   - Multi-threaded;

   features:
   - measure the RTT of packets in descrete way;
   - provide full log of packet times;

   
@subsection _server 3.1 Available options

   The following table describes sockperf options, and their possible values:
@code
 -h,-?   --help,--usage       	Show the help message and exit.
 -d      --debug              	Print extra debug information.
 -i      --ip                 	Listen on/send to ip <ip>.
 -p      --port               	Listen on/connect to port <port> (default 11111).
 -m      --msg-size           	Use messages of size <size> bytes (minimum default 12).
 -f      --file               	Tread multiple ip+port combinations from file <file> 
                                (server uses select).
 -F      --io-hanlder-type    	Type of multiple file descriptors handle 
                                [s|select|p|poll|e|epoll](default select).
 -a      --activity           	Measure activity by printing a '.' for the last 
                                <N> packets processed.
 -A      --Activity           	Measure activity by printing the duration for last 
                                <N> packets processed.
         --rx-mc-if           	<ip> address of interface on which to receive mulitcast 
                                packets (can be other then route table).
         --tx-mc-if           	<ip> address of interface on which to transmit mulitcast 
                                packets (can be other then route table).
         --timeout            	Set select/poll/epoll timeout to <msec>, -1 for infinite 
                                (default is 10 msec).
         --mc-loopback-enable  	Enables mc loopback (default disabled).
         --udp-buffer-size    	Set udp buffer size to <size> bytes.
         --vmazcopyread       	If possible use VMA's zero copy reads API (See VMA's readme).
         --daemonize          	Run as daemon.
         --nonblocked         	Open non-blocked sockets.
         --dontwarmup         	Don't send warm up packets on start.
         --pre-warmup-wait    	Time to wait before sending warm up packets (seconds).
@endcode

@subsection _server 3.2 Server

   Server options are:
@code
 -B      --Bridge               Run in Bridge mode.
         --threads-num          Run <N> threads on server side (requires '-f' option).
         --vmarxfiltercb        If possible use VMA's receive path packet filter 
                                callback API (See VMA's readme).
         --force-unicast-rep    Force server to reply via unicast.
 -g      --gap-detection        Enable gap-detection.
@endcode

@subsection _client 3.3 Client

   sockperf supports different scenarios to run itself as a client. There are under-load,
   ping-pong, playback and throughput subcommands to select one of the scenarios.
   
   - under-load - run sockperf client for latency under load test;
   - ping-pong - run sockperf client for latency test in ping pong mode;
   - playback - run sockperf client for latency test using playback of predefined 
                traffic, based on timeline and message size;
   - throughput - run sockperf client for one way throughput test;

   General client options are:
@code
 -t      --time                 Run for <sec> seconds (default 1, max = 36000000).
 -b      --burst                Control the client's number of a packets sent in every burst.
 -r      --range                comes with -m <size>, randomly change the messages size in range: <size> +- <N>.
         --data-integrity       Perform data integrity test.
         --srv_num              Set num of servers the client works with to N.
         --pps                  Set number of packets-per-second (default = 10000; for maximum use --pps=max).
         --sender-affinity      Set sender thread affinity to the given core id (see: cat /proc/cpuinfo).
         --receiver-affinity    Set receiver thread affinity to the given core id (see: cat /proc/cpuinfo).
         --full-log             Dump full log of all packets send/receive time to the given file in CSV format.
         --no-rdtsc             Don't use register when taking time; instead use monotonic clock.
         --load-vma             Load VMA dynamically even when LD_PRELOAD was not used.
@endcode

@subsection _tool 3.4 Tools

   SockPerf package contains few scripts that allow to generate special formatted file to launch tool in
   different configurations.
   - filter.awk - can be used for filtering lines from the full log file based on given latency range;
   - gen1.awk - this awk script generates playback files;
   - gen2.awk - this awk script generates playback files using  the input for this script is file with lines of the format:
                startTime; duration; startPPS; endPPS; msgSize

@code
   create playback file using gen1.awk > pfile
   start server on ipX
   start client using: ./sockperf ping-pong -i ipX --playback=pfile
@endcode

@subsection _option 3.5 Usage

   To start sockperf as "server" service, use the "server" subcommand. To stop the server, send Ctrl+C.
@code
$bin/sockperf server -i 224.18.7.81 -p 5001
sockperf:  == version #1.0.0 ==
sockperf: No VMA version info
sockperf: [SERVER] listen on: IP = 224.18.7.81 PORT = 5001
sockperf: Warmup stage (sending a few dummy packets)...
sockperf: [tid 14325] using recvfrom() to block on socket(s)
@endcode   

   To run client side, sockperf has to be initiated with one of supported subcommand. 
   There are lot of other options, which performs different kind of testing.
@code
$bin/sockperf ping-pong -i 224.18.7.81 -p 5001 -m 16384 -t 10 --pps=max
sockperf:  == version #1.0.exported ==
sockperf: No VMA version info
sockperf[CLIENT] send on:sockperf: using recvfrom() to block on socket(s)
 IP = 224.18.7.81 PORT = 5001
sockperf: Warmup stage (sending a few dummy packets)...
sockperf: Starting test...
sockperf: Test end (interrupted by timer)
sockperf: Test ended
sockperf: ========= Printing statistics for Server No: 0
sockperf: [including warmup] RunTime=10.101 sec; SentMessages=128328; ReceivedMessages=128327
sockperf: ====> avg-lat= 39.273 (std-dev=2.468)
sockperf: # dropped packets = 0; # duplicated packets = 0; # out-of-order packets = 0
sockperf: Summary: Latency is 39.273 usec
sockperf: Total 127245 observations; each percentile contains 1272.45 observations
sockperf: ---> <MAX> observation =   94.539
sockperf: ---> percentile  99.99 =   76.736
sockperf: ---> percentile  99.90 =   58.677
sockperf: ---> percentile  99.50 =   56.926
sockperf: ---> percentile  99.00 =   55.974
sockperf: ---> percentile  95.00 =   40.823
sockperf: ---> percentile  90.00 =   40.517
sockperf: ---> percentile  75.00 =   39.736
sockperf: ---> percentile  50.00 =   38.919
sockperf: ---> percentile  25.00 =   38.303
sockperf: ---> <MIN> observation =   36.438
@endcode   

       
@section _licensing 4. LICENSING

  Read "copying" file in the root place.

@section _installation 5. INSTALLATION

@subsection _requirements 5.1 Requirements
 
What you will need to compile sockperf on Unix systems

   - perl 5.8+ (used by the automake tools)

   - GNU make tools: automake 1.7+, autoconf 2.57+, m4 1.4+ and libtool 1.4+

   - A Compiler, among those tested are:
      - gcc4 (Ubuntu 9)
      - gcc4 (Red Hat 4.x)

@subsection _options 5.2 Options to compile


@subsection _install 5.3 How to install

   Download sockperf-\<version\>.tar.gz.
   
   Uncompress *.tar.gz file in Unix systems in the same folder with the file 
   by runing the following command in the shell:
@code
   tar -zxvf sockperf-<version>.tar.gz
@endcode
   or 2 command:
@code
   gzip -d ./sockperf-<version>.tar.gz
   tar -xf ./sockperf-<version>.tar
@endcode

   GNU make utility can be used.

@code
    $ make -f makefile.gnu
    $ make -f makefile.gnu clean
    $ make -f makefile.gnu install
    $ make -f makefile.gnu uninstall
    $ make -f makefile.gnu dist
@endcode

  The sockperf package uses the GNU autotools compilation and installation
  framework.

  These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.
@code     
    $ ./configure --prefix=<path to install>
@endcode

   There are several options to ./config (or ./Configure) to customize
   the build:

  To enable test scripts
@code
    $ ./configure --prefix=<path to install> --enable-test
@endcode
   
  To enable the documentation
@code
    $ ./configure --prefix=<path to install> --enable-doc
@endcode
   
  To enable the special scripts
@code
    $ ./configure --prefix=<path to install> --enable-tool
@endcode
   
  To compile with debug symbols and information: 
@code
    $ ./configure --prefix=<path to install> --enable-debug
@endcode

   This will define the _DEBUG variable at compile time.

   Type './configure --help' for a list of all the configure
   options. Some of the options are generic autoconf options, while the aLic
   specific options are prefixed with "SOCKPERF:" in the help text.

  2. Type `make' to compile the package.
@code     
    $ make
@endcode

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.
@code     
    $ make install
@endcode

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

*/
